It seems like you have a series of questions related to JavaScript. Here are the answers to each question:

ðŸ’¡ **Q.1** Explain Hoisting in JavaScript:
Hoisting is a JavaScript behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase. This means that you can use variables and functions before they are actually declared in the code. However, only the declarations are hoisted, not the initializations or assignments.

ðŸ’¡ **Q.2** Explain Temporal Dead Zone:
The Temporal Dead Zone (TDZ) is a behavior in JavaScript that occurs when trying to access a variable before it has been initialized. When a variable is declared using `let` or `const`, it is hoisted to the top of its block scope, but remains in an uninitialized state until the actual declaration statement is encountered. If you try to access the variable within the TDZ, a `ReferenceError` will be thrown.

ðŸ’¡ **Q.3** Difference between `var` and `let`:
The main difference between `var` and `let` is in their scoping behavior. Variables declared with `var` are function-scoped or globally-scoped, meaning they are accessible throughout the entire function or global scope. On the other hand, variables declared with `let` are block-scoped, meaning they are only accessible within the nearest enclosing block. Another difference is that `var` variables are hoisted to the top of their scope, while `let` variables are not hoisted.

ðŸ’¡ **Q.4** What are the major features introduced in ECMAScript 6:
ECMAScript 6 (ES6), also known as ECMAScript 2015, introduced several new features to JavaScript. Some of the major features include block-scoped variables (`let` and `const`), arrow functions, classes, modules, template literals, destructuring assignments, default parameter values, spread operator, and enhanced object literals.

ðŸ’¡ **Q.5** What is the difference between `let` and `const` in ES6:
The difference between `let` and `const` lies in their reassignment behavior. Variables declared with `let` can be reassigned to a new value, while variables declared with `const` cannot be reassigned after their initial assignment. However, it's important to note that `const` variables are not immutable, meaning their properties can still be modified if they are objects or arrays.

ðŸ’¡ **Q.6** What is template literals in ES6 and how do you use them:
Template literals, also known as template strings, are a feature in ES6 that allow for more flexible string formatting. They are enclosed within backticks (`) instead of single or double quotes. Template literals support multiline strings, interpolation of variables using `${}`, and the ability to include expressions or function calls directly within the string.

Example usage:
```javascript
const name = 'John';
const age = 25;

const greeting = `Hello, my name is ${name} and I am ${age} years old.`;
console.log(greeting);
```

Output:
```
Hello, my name is John and I am 25 years old.
```

ðŸ’¡ **Q.7** What's the difference between `map` and `forEach`:
Both `map` and `forEach` are array methods in JavaScript. The main difference is that `map` creates a new array with the results of calling a provided function on every element, while `forEach` executes a provided function once for each array element, but does not return a new array.

Example usage of `map`:
```javascript
const numbers = [1, 2, 3, 4];
const doubledNumbers = numbers.map(num =>

 num * 2);
console.log(doubledNumbers); // [2, 4, 6, 8]
```

Example usage of `forEach`:
```javascript
const numbers = [1, 2, 3, 4];
numbers.forEach(num => console.log(num));
// Output:
// 1
// 2
// 3
// 4
```

ðŸ’¡ **Q.8** How can you destructure objects and arrays in ES6:
Destructuring assignment is a feature in ES6 that allows you to extract values from objects or arrays into distinct variables.

Example usage with objects:
```javascript
const person = { name: 'John', age: 25, city: 'New York' };
const { name, age } = person;
console.log(name, age); // John 25
```

Example usage with arrays:
```javascript
const numbers = [1, 2, 3];
const [first, second] = numbers;
console.log(first, second); // 1 2
```

ðŸ’¡ **Q.9** How can you define default parameter values in ES6 functions:
ES6 introduced the ability to set default values for function parameters. If a parameter is not passed or is explicitly set as `undefined`, the default value will be used.

Example usage:
```javascript
function greet(name = 'Anonymous') {
  console.log(`Hello, ${name}!`);
}

greet(); // Hello, Anonymous!
greet('John'); // Hello, John!
```

ðŸ’¡ **Q.10** What is the purpose of the spread operator (`...`) in ES6:
The spread operator (`...`) is used to expand elements of an array or properties of an object. It allows you to create copies or merge arrays/objects easily.

Example usage with arrays:
```javascript
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5, 6];
console.log(arr2); // [1, 2, 3, 4, 5, 6]
```

Example usage with objects:
```javascript
const obj1 = { x: 1, y: 2 };
const obj2 = { ...obj1, z: 3 };
console.log(obj2); // { x: 1, y: 2, z: 3 }
```

The spread operator is versatile and can be used in various scenarios, such as function arguments, array manipulation, object cloning, and more.